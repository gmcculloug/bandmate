<% if params[:error] == 'copy_failed' %>
    <div class="errors" style="margin-bottom: 20px;">
        <p>Failed to copy gig. Please try again.</p>
    </div>
<% end %>

<% unless @gig %>
    <div class="errors" style="margin-bottom: 20px;">
        <p>Set list not found.</p>
    </div>
    <% return %>
<% end %>

<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; flex-wrap: wrap; gap: 10px;">
    <h2>üìã <%= @gig.name %></h2>
    <div style="display: flex; align-items: center; gap: 8px;">
        <a href="/gigs/<%= @gig.id %>/print" target="_blank" class="print-icon-button" style="display: flex; align-items: center; justify-content: center; width: 44px; height: 44px; background: #f7fafc; border: 1px solid #e2e8f0; border-radius: 8px; text-decoration: none; color: #4a5568; transition: all 0.2s;" onmouseover="this.style.backgroundColor='#edf2f7'; this.style.borderColor='#cbd5e0';" onmouseout="this.style.backgroundColor='#f7fafc'; this.style.borderColor='#e2e8f0';" title="Print Gig">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="6,9 6,2 18,2 18,9"></polyline>
                <path d="M6,18H4a2,2 0,0,1-2-2V11a2,2 0,0,1,2-2H20a2,2 0,0,1,2,2v5a2,2 0,0,1-2,2H18"></path>
                <polyline points="6,14 18,14 18,20 6,20 6,14"></polyline>
            </svg>
        </a>
        <div class="burger-menu">
        <button type="button" class="burger-button" onclick="toggleGigMenu()">
            ‚ò∞
        </button>
        <div class="burger-menu-dropdown" id="gig-menu">
            <a href="/gigs/<%= @gig.id %>/edit" class="burger-menu-item">
                <span class="icon">‚úèÔ∏è</span>Edit
            </a>
            <button type="button" class="burger-menu-item" onclick="confirmCopyGig()">
                <span class="icon">üìã</span>Copy
            </button>
            <% if @gig.songs.any? %>
                <button type="button" class="burger-menu-item" onclick="showCopyToGigModal(); closeGigMenu();">
                    <span class="icon">üéµ</span>Copy Songs to Gig
                </button>
            <% end %>
        </div>
        </div>
    </div>
</div>

<!-- Backdrop for closing menu -->
<div class="burger-menu-backdrop" id="gig-menu-backdrop" onclick="closeGigMenu()"></div>

<% if @gig && ((@gig.venue && @gig.venue.present?) || @gig.performance_date.present? || @gig.start_time.present?) %>
    <div style="margin-bottom: -10px; padding: 15px; background: #f7fafc; border-radius: 8px;">
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
            <% if @gig.venue && @gig.venue.present? %>
                <div class="detail-item">
                    <span class="detail-label">Venue:</span>
                    <%
                    venue_tooltip_parts = []
                    venue_tooltip_parts << "Location: #{@gig.venue.location}" if @gig.venue.location.present?
                    venue_tooltip_parts << "Contact: #{@gig.venue.contact_name}" if @gig.venue.contact_name.present?
                    venue_tooltip_parts << "Phone: #{@gig.venue.phone_number}" if @gig.venue.phone_number.present?
                    venue_tooltip = venue_tooltip_parts.join("&#10;")
                    %>
                    <a href="/venues/<%= @gig.venue.id %>" class="venue-link" style="color: #667eea; text-decoration: none;" <% if venue_tooltip.present? %>data-venue-tooltip="<%= venue_tooltip %>"<% end %>><%= @gig.venue.name %></a>
                </div>
            <% end %>
            <% if @gig.performance_date.present? %>
                <div class="detail-item">
                    <span class="detail-label">Date:</span> <%= @gig.performance_date.strftime('%B %d, %Y') %>
                </div>
            <% end %>
            <% if @gig.start_time.present? %>
                <div class="detail-item">
                    <span class="detail-label">Start Time:</span> <%= @gig.start_time.strftime('%I:%M %p') %>
                </div>
            <% end %>
            <% if @gig.end_time.present? %>
                <div class="detail-item">
                    <span class="detail-label">End Time:</span> <%= @gig.end_time.strftime('%I:%M %p') %>
                </div>
            <% end %>
        </div>
    </div>
<% end %>

<div class="card">

    <% if @gig.notes.present? %>
        <div style="margin-bottom: 20px; padding: 15px; background: #f7fafc; border-radius: 8px;">
            <h4>Notes</h4>
            <p><%= @gig.notes %></p>
        </div>
    <% end %>

    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; flex-wrap: wrap; gap: 10px;">
        <h3><a href="/gigs/<%= @gig.id %>/manage_songs" class="songs-link" style="color: #667eea; text-decoration: none; cursor: pointer;" onmouseover="this.style.textDecoration='underline'; this.style.color='#4c51bf';" onmouseout="this.style.textDecoration='none'; this.style.color='#667eea';" data-tooltip="Manage Songs">Songs</a> (<%= @gig.songs.count %>) ‚Ä¢
            <span style="color: #4a5568; font-weight: normal;">Estimated Duration:
                <%
                  total_minutes = @gig.songs.sum do |s|
                    if s.duration.present? && s.duration.match?(/^\d+:\d+$/)
                      parts = s.duration.split(':').map(&:to_i)
                      parts[0] + parts[1]/60.0
                    else
                      0
                    end
                  end

                  if total_minutes > 0
                    hours = (total_minutes / 60).to_i
                    minutes = (total_minutes % 60).round

                    if hours > 0
                      formatted_total = "#{hours}h #{minutes}m"
                    else
                      formatted_total = "#{minutes}m"
                    end
                  else
                    formatted_total = 'N/A'
                  end
                %>
                <%= formatted_total %>
            </span>
        </h3>
    </div>

    <% if @gig.songs.any? %>
        <%
          gig_songs_by_set = @gig.gig_songs.includes(:song).order(:set_number, :position).group_by(&:set_number)
          max_set = gig_songs_by_set.keys.max || 1
        %>

        <!-- Sets container for side-by-side layout -->
        <div style="display: flex; gap: 20px; flex-wrap: wrap; align-items: flex-start;">
          <% (1..max_set).each do |set_number| %>
            <% if gig_songs_by_set[set_number] %>
              <div style="flex: 1; min-width: 300px; margin-bottom: 25px;">
                <h4 style="color: #2d3748; margin-bottom: 10px; padding-bottom: 5px; border-bottom: 2px solid #e2e8f0;">
                  Set <%= set_number %> (<%= gig_songs_by_set[set_number].count %> songs)
                </h4>
              
              <% gig_songs_by_set[set_number].each_with_index do |gig_song, index| %>
                <%
                  # Build tooltip content with song details (one per line)
                  tooltip_parts = []
                  tooltip_parts << "Artist: #{gig_song.song.artist}" if gig_song.song.artist.present?
                  tooltip_parts << "Tempo: #{gig_song.song.tempo} BPM" if gig_song.song.tempo.present?
                  tooltip_parts << "Duration: #{gig_song.song.duration}" if gig_song.song.duration.present?
                  tooltip_parts << "Year: #{gig_song.song.year}" if gig_song.song.year.present?
                  tooltip_content = tooltip_parts.join("&#10;")
                %>
                <div class="song-card" style="margin-bottom: 4px; padding: 8px 12px; border: 1px solid #e2e8f0; border-radius: 4px; cursor: pointer;" onclick="window.location.href='/songs/<%= gig_song.song.id %>'" data-tooltip="<%= tooltip_content %>">
                  <div style="display: flex; justify-content: space-between; align-items: center; gap: 10px; white-space: nowrap;">
                    <div style="flex: 1; min-width: 0; display: flex; align-items: center; gap: 8px; overflow: hidden;">
                      <div style="font-weight: 600; font-size: 1rem; overflow: hidden; text-overflow: ellipsis; min-width: 0; flex: 1;">
                        <%= gig_song.song.title %>
                        <% if gig_song.song.notes.present? %>
                          <span style="color: #718096; font-weight: normal; font-size: 0.9rem;"> ‚Ä¢ <%= gig_song.song.notes %></span>
                        <% end %>
                      </div>
                      <div style="font-size: 0.85rem; color: #4a5568; flex-shrink: 0; flex-grow: 0;">
                        <span style="background: #667eea; color: white; padding: 2px 6px; border-radius: 10px; font-size: 0.75rem; white-space: nowrap;">
                          <%= gig_song.song.key %>
                        </span>
                      </div>
                    </div>
                    <% if gig_song.song.url.present? %>
                      <div class="actions" onclick="event.stopPropagation();" style="display: flex; gap: 5px; flex-shrink: 0;">
                        <a href="<%= gig_song.song.url %>" target="_blank" class="btn btn-small" style="font-size: 0.75rem; padding: 4px 8px; min-height: 28px;">üéµ</a>
                      </div>
                    <% end %>
                  </div>
                </div>
              <% end %>
              </div>
            <% end %>
          <% end %>
        </div>
        <!-- End sets container -->

    <% else %>
        <div style="text-align: center; padding: 40px;">
            <h3>No songs in this gig yet</h3>
            <p>Add some songs to get started!</p>
            <a href="/gigs/<%= @gig.id %>/manage_songs" class="btn btn-success">Manage Songs</a>
        </div>
    <% end %>
</div>

<!-- Copy to Gig Modal -->
<div id="copy-to-gig-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 1000; padding: 20px; box-sizing: border-box;">
    <div style="background: white; border-radius: 10px; max-width: 600px; margin: 50px auto; padding: 30px; max-height: 80vh; overflow-y: auto;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h3 style="margin: 0;">Copy Songs to Another Gig</h3>
            <button type="button" onclick="closeCopyToGigModal()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #718096;">&times;</button>
        </div>

        <p style="color: #4a5568; margin-bottom: 20px;">Select a gig with no songs to copy this gig's songs to:</p>

        <div id="empty-gigs-list" style="max-height: 400px; overflow-y: auto;">
            <!-- Will be populated by JavaScript -->
        </div>

        <div style="margin-top: 20px; text-align: right; display: flex; gap: 10px; justify-content: flex-end;">
            <button type="button" class="btn" onclick="closeCopyToGigModal()">Cancel</button>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div id="copy-confirmation-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 1001; padding: 20px; box-sizing: border-box;">
    <div style="background: white; border-radius: 10px; max-width: 500px; margin: 100px auto; padding: 30px;">
        <h3 style="margin: 0 0 15px 0;">Confirm Copy</h3>
        <p id="confirmation-text" style="margin-bottom: 20px;"></p>

        <div style="display: flex; gap: 10px; justify-content: flex-end;">
            <button type="button" class="btn" onclick="closeConfirmationModal()">Cancel</button>
            <button type="button" class="btn btn-success" onclick="confirmCopy()">Copy Songs</button>
        </div>
    </div>
</div>

<script>
let selectedTargetGigId = null;
let selectedTargetGigName = null;

// Burger Menu Functions
function toggleGigMenu() {
    const menu = document.getElementById('gig-menu');
    const backdrop = document.getElementById('gig-menu-backdrop');

    if (menu.classList.contains('show')) {
        closeGigMenu();
    } else {
        menu.classList.add('show');
        backdrop.classList.add('show');
    }
}

function closeGigMenu() {
    const menu = document.getElementById('gig-menu');
    const backdrop = document.getElementById('gig-menu-backdrop');

    menu.classList.remove('show');
    backdrop.classList.remove('show');
}

function confirmCopyGig() {
    if (confirm('Copy this gig?')) {
        // Create and submit the form
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/gigs/<%= @gig.id %>/copy';
        document.body.appendChild(form);
        form.submit();
    }
    closeGigMenu();
}

function showCopyToGigModal() {
    // Only show if current gig has songs
    <% if @gig.songs.any? %>
        fetchEmptyGigs();
        document.getElementById('copy-to-gig-modal').style.display = 'block';
    <% else %>
        alert('This gig has no songs to copy. Add some songs first!');
    <% end %>
}

function closeCopyToGigModal() {
    console.log('DEBUG: closeCopyToGigModal called, current values - selectedTargetGigId:', selectedTargetGigId, 'selectedTargetGigName:', selectedTargetGigName);
    document.getElementById('copy-to-gig-modal').style.display = 'none';
    // DON'T reset the variables when closing the modal - we need them for the confirmation modal
    // selectedTargetGigId = null;
    // selectedTargetGigName = null;
    console.log('DEBUG: Modal closed, keeping variables intact');
}

function closeConfirmationModal() {
    document.getElementById('copy-confirmation-modal').style.display = 'none';
    // Reset variables when confirmation modal is closed
    selectedTargetGigId = null;
    selectedTargetGigName = null;
    console.log('DEBUG: Confirmation modal closed, variables reset');
}


function fetchEmptyGigs() {
    const listContainer = document.getElementById('empty-gigs-list');
    listContainer.innerHTML = '<div style="text-align: center; padding: 20px;">Loading...</div>';

    fetch('/gigs/<%= @gig.id %>/empty_gigs', {
            credentials: 'same-origin'
        })
        .then(response => {
            return response.json();
        })
        .then(data => {
            if (data.error) {
                listContainer.innerHTML = `<div style="text-align: center; padding: 20px; color: #e53e3e;">Error: ${data.error}</div>`;
                return;
            }

            if (data.gigs && data.gigs.length > 0) {
                try {
                    const gigHtml = data.gigs.map((gig, index) => {
                        const escapedName = (gig.name || '').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
                        const gigDate = gig.performance_date || 'No date set';
                        const safeName = (gig.name || '').replace(/'/g, "\\'").replace(/"/g, '\\"');
                        return `
                            <div class="gig-option gig-option-${index}"
                                 data-gig-id="${gig.id}"
                                 data-gig-name="${escapedName}"
                                 data-gig-date="${gigDate}"
                                 style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; margin-bottom: 10px; cursor: pointer; transition: all 0.2s;"
                                 onclick="selectedTargetGigId = ${gig.id}; selectedTargetGigName = '${safeName}'; selectTargetGig(${gig.id}, '${safeName}', '${gigDate}');"
                                 onmouseover="this.style.borderColor='#667eea'; this.style.backgroundColor='#f7fafc';"
                                 onmouseout="this.style.borderColor='#e2e8f0'; this.style.backgroundColor='white';">
                                <div style="font-weight: 600; color: #2d3748; margin-bottom: 5px;">${gig.name}</div>
                                <div style="color: #718096; font-size: 0.9rem;">
                                    ${gig.performance_date ? new Date(gig.performance_date).toLocaleDateString('en-US', { weekday: 'short', year: 'numeric', month: 'long', day: 'numeric' }) : 'No date set'}
                                    ${gig.venue_name ? ' ‚Ä¢ ' + gig.venue_name : ''}
                                </div>
                            </div>
                        `;
                    }).join('');
                    listContainer.innerHTML = gigHtml;

                    // Add event listeners to gig options
                    const gigOptions = listContainer.querySelectorAll('.gig-option');
                    gigOptions.forEach(option => {
                        option.addEventListener('click', function() {
                            const gigId = this.getAttribute('data-gig-id');
                            const gigName = this.getAttribute('data-gig-name').replace(/&quot;/g, '"').replace(/&#39;/g, "'");
                            const gigDate = this.getAttribute('data-gig-date');
                            selectTargetGig(parseInt(gigId), gigName, gigDate);
                        });
                    });
                } catch (error) {
                    listContainer.innerHTML = '<div style="text-align: center; padding: 20px; color: #e53e3e;">Error displaying gigs. Please try again.</div>';
                }
            } else {
                listContainer.innerHTML = '<div style="text-align: center; padding: 40px; color: #718096;">No empty gigs found. All other gigs already have songs assigned.</div>';
            }
        })
        .catch(error => {
            listContainer.innerHTML = '<div style="text-align: center; padding: 20px; color: #e53e3e;">Error loading gigs. Please try again.</div>';
        });
}

function selectTargetGig(gigId, gigName, gigDate) {
    console.log('DEBUG: selectTargetGig called with:', gigId, gigName, gigDate);
    selectedTargetGigId = gigId;
    selectedTargetGigName = gigName;
    console.log('DEBUG: Set global variables - selectedTargetGigId:', selectedTargetGigId, 'selectedTargetGigName:', selectedTargetGigName);

    // Show confirmation modal
    const confirmationText = `Are you sure you want to copy all songs from "<strong><%= @gig.name %></strong>" to "<strong>${gigName}</strong>"?<br><br>` +
        `This will copy <strong><%= @gig.songs.count %> song<%= @gig.songs.count == 1 ? '' : 's' %></strong> to the target gig.`;

    document.getElementById('confirmation-text').innerHTML = confirmationText;

    closeCopyToGigModal();
    document.getElementById('copy-confirmation-modal').style.display = 'block';
    console.log('DEBUG: Confirmation modal should now be visible');
}

function confirmCopy() {
    console.log('DEBUG: confirmCopy called, selectedTargetGigId:', selectedTargetGigId, 'selectedTargetGigName:', selectedTargetGigName);

    if (!selectedTargetGigId) {
        console.log('DEBUG: selectedTargetGigId is null/undefined');
        alert('Please select a gig first');
        return;
    }

    // Show loading state
    const confirmBtn = document.querySelector('#copy-confirmation-modal .btn-success');
    confirmBtn.textContent = 'Copying...';
    confirmBtn.disabled = true;

    console.log('DEBUG: Sending copy request with target_gig_id:', selectedTargetGigId);

    fetch('/gigs/<%= @gig.id %>/copy_to_gig', {
        method: 'POST',
        credentials: 'same-origin',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `target_gig_id=${selectedTargetGigId}`
    })
    .then(response => {
        console.log('DEBUG: Response received:', response.status);
        return response.json();
    })
    .then(data => {
        console.log('DEBUG: Response data:', data);
        if (data.success) {
            closeConfirmationModal();
            // No popup - just close the modal silently
        } else {
            alert(`Error: ${data.error || 'Failed to copy songs. Please try again.'}`);
            confirmBtn.textContent = 'Copy Songs';
            confirmBtn.disabled = false;
        }
    })
    .catch(error => {
        console.error('DEBUG: Error:', error);
        alert('Error copying songs. Please try again.');
        confirmBtn.textContent = 'Copy Songs';
        confirmBtn.disabled = false;
    });
}

// Close modals when clicking outside
document.addEventListener('click', function(event) {
    const copyModal = document.getElementById('copy-to-gig-modal');
    const confirmModal = document.getElementById('copy-confirmation-modal');

    if (event.target === copyModal) {
        closeCopyToGigModal();
    }

    if (event.target === confirmModal) {
        closeConfirmationModal();
    }
});

// Close modals with Escape key
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeCopyToGigModal();
        closeConfirmationModal();
        closeGigMenu(); // Also close burger menu on escape
    }
});

// Close burger menu when clicking outside
document.addEventListener('click', function(event) {
    const gigMenu = document.getElementById('gig-menu');
    const gigButton = document.querySelector('.burger-button');

    // Don't close if clicking on the burger button or menu items
    if (!gigButton.contains(event.target) && !gigMenu.contains(event.target)) {
        closeGigMenu();
    }
});
</script>

<style>
/* Enhanced tooltip styling for song cards */
.song-card {
    position: relative;
}

.song-card[data-tooltip]:hover::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: #2d3748;
    color: white;
    padding: 12px 16px;
    border-radius: 6px;
    font-size: 0.875rem;
    white-space: pre-line;
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    margin-bottom: 8px;
    max-width: 300px;
    text-align: left;
    line-height: 1.5;
    opacity: 0;
    transition: opacity 0.3s ease;
    animation: showTooltip 0.3s ease forwards 1s;
}

.song-card[data-tooltip]:hover::before {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(100%);
    border: 6px solid transparent;
    border-top-color: #2d3748;
    z-index: 1000;
    margin-bottom: 2px;
    opacity: 0;
    transition: opacity 0.3s ease;
    animation: showTooltip 0.3s ease forwards 1s;
}

/* Only show tooltip if there's content */
.song-card[data-tooltip=""]:hover::after,
.song-card[data-tooltip=""]:hover::before {
    display: none;
}

/* Large venue tooltip styling */
.venue-link {
    position: relative;
}

.venue-link[data-venue-tooltip]:hover::after {
    content: attr(data-venue-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: #2d3748;
    color: white;
    padding: 20px 24px;
    border-radius: 12px;
    font-size: 16px;
    white-space: pre-line;
    z-index: 1000;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
    margin-bottom: 12px;
    min-width: 250px;
    max-width: 400px;
    text-align: left;
    line-height: 1.6;
    font-weight: 500;
    opacity: 0;
    transition: opacity 0.3s ease;
    animation: showTooltip 0.3s ease forwards 0.8s;
}

.venue-link[data-venue-tooltip]:hover::before {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(100%);
    border: 8px solid transparent;
    border-top-color: #2d3748;
    z-index: 1000;
    margin-bottom: 4px;
    opacity: 0;
    transition: opacity 0.3s ease;
    animation: showTooltip 0.3s ease forwards 0.8s;
}

/* Don't show tooltip if there's no content */
.venue-link:not([data-venue-tooltip]):hover::after,
.venue-link:not([data-venue-tooltip]):hover::before,
.venue-link[data-venue-tooltip=""]:hover::after,
.venue-link[data-venue-tooltip=""]:hover::before {
    display: none;
}

/* Keyframe animation for tooltip delay */
@keyframes showTooltip {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

/* Custom large tooltip for Songs link */
.songs-link {
    position: relative;
}

.songs-link[data-tooltip]:hover::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: #2d3748;
    color: white;
    padding: 16px 20px;
    border-radius: 8px;
    font-size: 18px;
    font-weight: 600;
    white-space: nowrap;
    z-index: 1000;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    margin-bottom: 10px;
    opacity: 0;
    transition: opacity 0.3s ease;
    animation: showTooltip 0.3s ease forwards 0.5s;
}

.songs-link[data-tooltip]:hover::before {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(100%);
    border: 8px solid transparent;
    border-top-color: #2d3748;
    z-index: 1000;
    margin-bottom: 2px;
    opacity: 0;
    transition: opacity 0.3s ease;
    animation: showTooltip 0.3s ease forwards 0.5s;
}
</style>

