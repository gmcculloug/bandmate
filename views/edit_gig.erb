<h2>✏️ Edit Gig: <%= @gig.name %></h2>

<% if defined?(@errors) && @errors.any? %>
    <div class="errors">
        <ul>
            <% @errors.each do |error| %>
                <li><%= error %></li>
            <% end %>
        </ul>
    </div>
<% end %>

<form method="POST" action="/gigs/<%= @gig.id %>" class="card">
    <input type="hidden" name="_method" value="PUT">
    
    <div class="form-group">
        <label for="gig_venue_id">Venue</label>
        <select id="gig_venue_id" name="venue_id" autofocus>
            <option value="">Select Venue (Optional)</option>
            <% @venues.each do |venue| %>
                <option value="<%= venue.id %>" data-venue-name="<%= venue.name %>" <%= 'selected' if @gig.venue_id == venue.id %>><%= venue.name %> - <%= venue.location %></option>
            <% end %>
        </select>
    </div>

    <div class="form-group">
        <label for="gig_name">Gig Name *</label>
        <input type="text" id="gig_name" name="name" value="<%= @gig.name %>" required>
    </div>

    <div style="display: grid; grid-template-columns: 1fr; gap: 20px;">
        <style>
            @media (min-width: 768px) {
                .form-grid {
                    grid-template-columns: 1fr 1fr !important;
                }
            }
        </style>
        <div class="form-grid" style="display: grid; grid-template-columns: 1fr; gap: 20px;">
            <div class="form-group">
                <label for="gig_performance_date">Performance Date *</label>
                <input type="date" id="gig_performance_date" name="performance_date" value="<%= @gig.performance_date&.strftime('%Y-%m-%d') %>" required>
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <div class="form-group">
                    <label for="gig_start_time">Start Time</label>
                    <input type="time" id="gig_start_time" name="start_time" value="<%= @gig.start_time&.strftime('%H:%M') %>">
                </div>

                <div class="form-group">
                    <label for="gig_end_time">End Time</label>
                    <input type="time" id="gig_end_time" name="end_time" value="<%= @gig.end_time&.strftime('%H:%M') %>">
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="gig_notes">Notes</label>
        <textarea id="gig_notes" name="notes" rows="3" placeholder="Any notes about this set list (special instructions, equipment needs, etc.)"><%= @gig.notes %></textarea>
    </div>

    <div class="actions">
        <button type="submit" class="btn btn-success">Update Gig</button>
        <a href="/gigs/<%= @gig.id %>" class="btn">Cancel</a>
    </div>
</form>

<div class="card" style="margin-top: 30px;">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
        <h3>Edit Song Order</h3>
        <a href="/gigs/<%= @gig.id %>" class="btn">Manage Songs</a>
    </div>
    <p>Drag and drop songs to reorder them, or use the up/down buttons:</p>
    
    <% if @gig.songs.any? %>
        <div id="song-list" style="margin-top: 20px;">
            <% @gig.gig_songs.includes(:song).order(:position).each_with_index do |gig_song, index| %>
                <div class="song-item" data-song-id="<%= gig_song.song.id %>" draggable="true" style="display: flex; align-items: center; padding: 15px; margin-bottom: 10px; background: #f7fafc; border-radius: 8px; border: 2px solid transparent; transition: all 0.3s ease;">
                    <div style="display: flex; align-items: center; gap: 15px; flex: 1;">
                        <div class="drag-handle" style="cursor: grab; padding: 5px; color: #718096;">⋮⋮</div>
                        <span style="background: #667eea; color: white; padding: 5px 10px; border-radius: 15px; font-weight: bold; min-width: 30px; text-align: center;">
                            <%= index + 1 %>
                        </span>
                        <div>
                            <div style="font-weight: bold; color: #2d3748;">
                                <%= gig_song.song.title %>
                                <% if gig_song.song.artist.present? %>
                                    <span style="color: #718096; font-weight: normal; font-size: 0.9rem;"> • <%= gig_song.song.artist %></span>
                                <% end %>
                            </div>
                        </div>
                    </div>
                    <div class="order-controls" style="display: flex; gap: 5px;">
                        <% if index > 0 %>
                            <button type="button" class="btn" onclick="moveSong(<%= gig_song.song.id %>, 'up')" style="padding: 5px 10px; font-size: 0.8rem;">↑</button>
                        <% end %>
                        <% if index < @gig.songs.count - 1 %>
                            <button type="button" class="btn" onclick="moveSong(<%= gig_song.song.id %>, 'down')" style="padding: 5px 10px; font-size: 0.8rem;">↓</button>
                        <% end %>
                    </div>
                </div>
            <% end %>
        </div>
        
        <div style="margin-top: 20px;">
            <button type="button" class="btn btn-success" onclick="saveOrder()">Save Order</button>
            <span id="save-status" style="margin-left: 10px; color: #718096;"></span>
        </div>
    <% else %>
        <p style="text-align: center; padding: 20px; color: #718096;">No songs in this set list yet. Add some songs first!</p>
    <% end %>
</div>

<script>
// Venue change detection for gig name auto-update
document.addEventListener('DOMContentLoaded', function() {
    const venueSelect = document.getElementById('gig_venue_id');
    const gigNameInput = document.getElementById('gig_name');
    let previousVenueName = '';
    
    // Initialize previousVenueName based on currently selected venue
    const initialSelectedOption = venueSelect.options[venueSelect.selectedIndex];
    if (initialSelectedOption && initialSelectedOption.dataset.venueName) {
        previousVenueName = initialSelectedOption.dataset.venueName;
    }
    
    venueSelect.addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        const newVenueName = selectedOption.dataset.venueName || '';
        
        // Auto-populate if gig name is blank
        if (gigNameInput.value.trim() === '') {
            if (selectedOption.value && newVenueName) {
                gigNameInput.value = newVenueName;
            }
        }
        // Replace if current gig name matches the previous venue name
        else if (gigNameInput.value.trim() === previousVenueName && newVenueName) {
            gigNameInput.value = newVenueName;
        }
        
        // Update the previous venue name for next comparison
        previousVenueName = newVenueName;
    });
});

let draggedElement = null;

// Initialize drag and drop
document.addEventListener('DOMContentLoaded', function() {
    const songList = document.getElementById('song-list');
    if (!songList) return;
    
    const songItems = songList.querySelectorAll('.song-item');
    
    songItems.forEach(item => {
        // Drag start
        item.addEventListener('dragstart', function(e) {
            draggedElement = item;
            item.style.opacity = '0.5';
            e.dataTransfer.effectAllowed = 'move';
        });
        
        // Drag end
        item.addEventListener('dragend', function(e) {
            item.style.opacity = '1';
            draggedElement = null;
            
            // Clear all border indicators
            songItems.forEach(songItem => {
                songItem.style.borderTop = '2px solid transparent';
                songItem.style.borderBottom = '2px solid transparent';
            });
        });
        
        // Drag over
        item.addEventListener('dragover', function(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            
            if (draggedElement && draggedElement !== item) {
                const rect = item.getBoundingClientRect();
                const midY = rect.top + rect.height / 2;
                
                // Clear previous indicators
                songItems.forEach(songItem => {
                    songItem.style.borderTop = '2px solid transparent';
                    songItem.style.borderBottom = '2px solid transparent';
                });
                
                if (e.clientY < midY) {
                    item.style.borderTop = '2px solid #667eea';
                } else {
                    item.style.borderBottom = '2px solid #667eea';
                }
            }
        });
        
        // Drag leave
        item.addEventListener('dragleave', function(e) {
            // Only clear if we're leaving the item (not entering a child)
            if (!item.contains(e.relatedTarget)) {
                item.style.borderTop = '2px solid transparent';
                item.style.borderBottom = '2px solid transparent';
            }
        });
        
        // Drop
        item.addEventListener('drop', function(e) {
            e.preventDefault();
            if (draggedElement && draggedElement !== item) {
                const rect = item.getBoundingClientRect();
                const midY = rect.top + rect.height / 2;
                
                if (e.clientY < midY) {
                    songList.insertBefore(draggedElement, item);
                } else {
                    songList.insertBefore(draggedElement, item.nextSibling);
                }
                
                updateNumbers();
                updateButtons();
            }
        });
    });
});

function moveSong(songId, direction) {
    const songList = document.getElementById('song-list');
    const songItems = Array.from(songList.querySelectorAll('.song-item'));
    const currentIndex = songItems.findIndex(item => item.dataset.songId == songId);
    
    if (direction === 'up' && currentIndex > 0) {
        // Move item up
        const currentItem = songItems[currentIndex];
        const previousItem = songItems[currentIndex - 1];
        songList.insertBefore(currentItem, previousItem);
    } else if (direction === 'down' && currentIndex < songItems.length - 1) {
        // Move item down
        const currentItem = songItems[currentIndex];
        const nextItem = songItems[currentIndex + 1];
        songList.insertBefore(currentItem, nextItem.nextSibling);
    }
    
    updateNumbers();
    updateButtons();
}

function updateNumbers() {
    const songItems = document.querySelectorAll('.song-item');
    songItems.forEach((item, index) => {
        const numberSpan = item.querySelector('span');
        numberSpan.textContent = index + 1;
    });
}

function updateButtons() {
    const songItems = document.querySelectorAll('.song-item');
    songItems.forEach((item, index) => {
        const orderControls = item.querySelector('.order-controls');
        if (!orderControls) return;
        
        // Clear existing buttons
        orderControls.innerHTML = '';
        
        // Add up button if not first item
        if (index > 0) {
            const upButton = document.createElement('button');
            upButton.type = 'button';
            upButton.className = 'btn';
            upButton.style.cssText = 'padding: 5px 10px; font-size: 0.8rem;';
            upButton.textContent = '↑';
            upButton.onclick = function() {
                moveSong(item.dataset.songId, 'up');
            };
            orderControls.appendChild(upButton);
        }
        
        // Add down button if not last item
        if (index < songItems.length - 1) {
            const downButton = document.createElement('button');
            downButton.type = 'button';
            downButton.className = 'btn';
            downButton.style.cssText = 'padding: 5px 10px; font-size: 0.8rem;';
            downButton.textContent = '↓';
            downButton.onclick = function() {
                moveSong(item.dataset.songId, 'down');
            };
            orderControls.appendChild(downButton);
        }
    });
}

function saveOrder() {
    const songItems = document.querySelectorAll('.song-item');
    const songOrder = Array.from(songItems).map(item => item.dataset.songId);
    
    const statusElement = document.getElementById('save-status');
    statusElement.textContent = 'Saving...';
    
    fetch('/gigs/<%= @gig.id %>/reorder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: songOrder.map(id => 'song_order[]=' + id).join('&')
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            statusElement.textContent = 'Order saved successfully!';
            statusElement.style.color = '#38a169';
            setTimeout(() => {
                statusElement.textContent = '';
            }, 2000);
        } else {
            statusElement.textContent = 'Error saving order';
            statusElement.style.color = '#e53e3e';
        }
    })
    .catch(error => {
        statusElement.textContent = 'Error saving order';
        statusElement.style.color = '#e53e3e';
        console.error('Error:', error);
    });
}
</script>

<div class="card" style="margin-top: 20px; background: #fed7d7; border: 1px solid #fc8181;">
    <h3 style="color: #c53030;">Danger Zone</h3>
    <p>Deleting this gig is permanent and cannot be undone.</p>
    <form method="POST" action="/gigs/<%= @gig.id %>" style="margin-top: 15px;">
        <input type="hidden" name="_method" value="DELETE">
        <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this gig? This action cannot be undone.')">Delete Gig</button>
    </form>
</div> 