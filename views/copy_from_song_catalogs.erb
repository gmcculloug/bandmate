<div style="margin-bottom: 20px;">
    <h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: -3px; margin-right: 8px;"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>Copy from Song Catalog</h2>
</div>

<form id="copy-songs-form" method="post" action="/songs/copy_from_song_catalog">
    <div class="copy-interface" style="display: grid; grid-template-columns: 1fr auto 1fr; gap: 20px; margin-bottom: 20px;">
        
        <!-- Left Column: Song Catalog -->
        <div class="song-catalog-section">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <h3 style="margin: 0;"><svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: -3px; margin-right: 6px;"><circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path></svg>Song Catalog (<span id="catalog-count"><%= @song_catalogs.count %></span>)</h3>
                <div style="display: flex; gap: 10px;">
                    <button type="button" id="select-all-catalog" class="btn btn-outline" style="padding: 5px 10px; font-size: 0.8rem;">Select All</button>
                    <button type="button" id="clear-catalog" class="btn btn-outline" style="padding: 5px 10px; font-size: 0.8rem;">Clear</button>
                </div>
            </div>
            
            <!-- Search Filter -->
            <div style="margin-bottom: 15px;">
                <input type="text" id="catalog-search" value="<%= @search %>" placeholder="Filter song catalog..." style="width: 100%; padding: 8px; border: 2px solid #e2e8f0; border-radius: 6px; font-size: 14px;">
            </div>
            
            <!-- Song Catalog List -->
            <div id="song-catalog-list" class="songs-list" style="border: 2px solid #e2e8f0; border-radius: 8px; max-height: 400px; overflow-y: auto; background: #f8fafc;">
                <% if @song_catalogs.any? %>
                    <% @song_catalogs.each do |song_catalog| %>
                        <div class="song-item catalog-song" data-id="<%= song_catalog.id %>" style="padding: 10px; border-bottom: 1px solid #e2e8f0; cursor: pointer; user-select: none;">
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <input type="checkbox" class="song-checkbox" name="song_catalog_ids[]" value="<%= song_catalog.id %>" style="margin: 0;">
                                <div style="flex: 1;">
                                    <div style="font-weight: bold; color: #2d3748; margin-bottom: 3px;">
                                        <%= song_catalog.title %>
                                        <% if song_catalog.artist.present? %>
                                            <span style="color: #718096; font-weight: normal; font-size: 0.9rem;"> • <%= song_catalog.artist %></span>
                                        <% end %>
                                    </div>
                                    <div style="font-size: 0.8rem; color: #a0aec0; display: flex; flex-wrap: wrap; gap: 5px;">
                                        <span style="background: #667eea; color: white; padding: 2px 6px; border-radius: 10px;">
                                            <%= song_catalog.key %>
                                        </span>
                                        <% if song_catalog.tempo %>
                                            <span style="background: #38a169; color: white; padding: 2px 6px; border-radius: 10px;">
                                                <%= song_catalog.tempo %> BPM
                                            </span>
                                        <% end %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% end %>
                <% else %>
                    <div style="padding: 40px; text-align: center; color: #718096;">
                        <% if @search.present? %>
                            No songs found matching "<%= @search %>"
                        <% else %>
                            No available songs to copy
                        <% end %>
                    </div>
                <% end %>
            </div>
        </div>
        
        <!-- Middle Column: Action Buttons -->
        <div class="action-buttons" style="display: flex; flex-direction: column; justify-content: center; gap: 10px; min-width: 120px;">
            <button type="button" id="move-right" class="btn btn-primary" style="padding: 10px; white-space: nowrap;">
                → Add Selected
            </button>
            <button type="button" id="move-left" class="btn btn-outline" style="padding: 10px; white-space: nowrap;">
                ← Remove Selected
            </button>
        </div>
        
        <!-- Right Column: Selected Songs -->
        <div class="selected-songs-section">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <h3 style="margin: 0;"><svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: -3px; margin-right: 6px;"><path d="M9 18V5l12-2v13"></path><circle cx="6" cy="18" r="3"></circle><circle cx="18" cy="16" r="3"></circle></svg>Songs to Copy (<span id="selected-count">0</span>)</h3>
                <button type="button" id="clear-selected" class="btn btn-outline" style="padding: 5px 10px; font-size: 0.8rem;">Clear All</button>
            </div>
            
            <!-- Selected Songs List -->
            <div id="selected-songs-list" class="songs-list" style="border: 2px solid #e2e8f0; border-radius: 8px; max-height: 400px; overflow-y: auto; background: #f0fff4; min-height: 200px;">
                <div id="empty-message" style="padding: 40px; text-align: center; color: #718096;">
                    Select songs from the left to copy them to your band
                </div>
            </div>
        </div>
    </div>
    
    <!-- Copy Button -->
    <div style="text-align: center; margin-top: 20px;">
        <button type="submit" id="copy-button" class="btn btn-success" style="padding: 12px 24px; font-size: 16px;" disabled>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: -2px; margin-right: 6px;"><path d="M9 18V5l12-2v13"></path><circle cx="6" cy="18" r="3"></circle><circle cx="18" cy="16" r="3"></circle></svg>Copy Selected Songs to Band
        </button>
    </div>
</form>

<style>
.song-item {
    transition: background-color 0.2s ease;
}

.song-item:hover {
    background-color: #edf2f7 !important;
}

.song-item.selected {
    background-color: #bee3f8 !important;
    border-color: #3182ce !important;
}

.selected-song-item {
    background-color: #f0fff4 !important;
}

.selected-song-item:hover {
    background-color: #e6fffa !important;
}

.song-checkbox {
    transform: scale(1.2);
}

.btn {
    display: inline-block;
    padding: 8px 16px;
    background-color: #667eea;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s ease;
}

.btn:hover {
    background-color: #5a67d8;
}

.btn-primary {
    background-color: #667eea;
}

.btn-primary:hover {
    background-color: #5a67d8;
}

.btn-success {
    background-color: #38a169;
}

.btn-success:hover {
    background-color: #2f855a;
}

.btn-success:disabled {
    background-color: #a0aec0;
    cursor: not-allowed;
}

.btn-outline {
    background-color: transparent;
    color: #667eea;
    border: 2px solid #667eea;
}

.btn-outline:hover {
    background-color: #667eea;
    color: white;
}

.btn-secondary {
    background-color: #718096;
}

.btn-secondary:hover {
    background-color: #4a5568;
}

/* Mobile responsive design */
@media (max-width: 768px) {
    .copy-interface {
        grid-template-columns: 1fr !important;
        gap: 15px !important;
    }
    
    .action-buttons {
        flex-direction: row !important;
        justify-content: center !important;
        order: 1;
    }
    
    .selected-songs-section {
        order: 2;
    }
    
    .catalog-songs-section {
        order: 0;
    }
    
    #move-right, #move-left {
        padding: 8px 16px !important;
        font-size: 14px !important;
    }
}
</style>

<script>
let selectedSongs = new Set();

document.addEventListener('DOMContentLoaded', function() {
    initializeEventListeners();
    updateCounts();
    updateCopyButton();
    
    // Initialize search functionality
    initializeSearch();
});

function initializeEventListeners() {
    // Song catalog checkboxes
    document.querySelectorAll('.catalog-song .song-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            handleCatalogSongSelection(this);
        });
    });
    
    // Song item clicks (excluding checkbox)
    document.querySelectorAll('.catalog-song').forEach(item => {
        item.addEventListener('click', function(e) {
            if (e.target.type !== 'checkbox') {
                const checkbox = this.querySelector('.song-checkbox');
                checkbox.checked = !checkbox.checked;
                handleCatalogSongSelection(checkbox);
            }
        });
    });
    
    // Action buttons
    document.getElementById('move-right').addEventListener('click', moveSelectedToRight);
    document.getElementById('move-left').addEventListener('click', moveSelectedFromRight);
    
    // Utility buttons
    document.getElementById('select-all-catalog').addEventListener('click', selectAllCatalog);
    document.getElementById('clear-catalog').addEventListener('click', clearCatalogSelection);
    document.getElementById('clear-selected').addEventListener('click', clearSelectedSongs);
}

function handleCatalogSongSelection(checkbox) {
    const songItem = checkbox.closest('.song-item');
    
    if (checkbox.checked) {
        songItem.classList.add('selected');
    } else {
        songItem.classList.remove('selected');
    }
}

function moveSelectedToRight() {
    const checkedBoxes = document.querySelectorAll('.catalog-song .song-checkbox:checked');
    const selectedList = document.getElementById('selected-songs-list');
    const emptyMessage = document.getElementById('empty-message');
    
    checkedBoxes.forEach(checkbox => {
        const songId = checkbox.value;
        const songItem = checkbox.closest('.song-item');
        
        if (!selectedSongs.has(songId)) {
            selectedSongs.add(songId);
            
            // Clone the song item for the selected list
            const clonedItem = createSelectedSongItem(songItem, songId);
            
            if (emptyMessage) {
                emptyMessage.style.display = 'none';
            }
            
            selectedList.appendChild(clonedItem);
            
            // Remove the song from the catalog list
            songItem.remove();
        }
    });
    
    updateCounts();
    updateCopyButton();
}

function moveSelectedFromRight() {
    const selectedItems = document.querySelectorAll('.selected-song-item input:checked');
    const catalogList = document.getElementById('catalog-songs-list');
    
    selectedItems.forEach(checkbox => {
        const songId = checkbox.value;
        const songItem = checkbox.closest('.selected-song-item');
        
        // Create a copy of the song item for the catalog list
        const catalogItem = createCatalogSongItem(songItem, songId);
        
        // Add it back to the catalog list (maintain alphabetical order)
        insertInAlphabeticalOrder(catalogList, catalogItem);
        
        selectedSongs.delete(songId);
        songItem.remove();
    });
    
    // Show empty message if no songs selected
    if (selectedSongs.size === 0) {
        const emptyMessage = document.getElementById('empty-message');
        if (emptyMessage) {
            emptyMessage.style.display = 'block';
        }
    }
    
    updateCounts();
    updateCopyButton();
}

function createSelectedSongItem(originalItem, songId) {
    const item = originalItem.cloneNode(true);
    item.className = 'song-item selected-song-item';
    item.dataset.id = songId;
    
    // Update checkbox
    const checkbox = item.querySelector('.song-checkbox');
    checkbox.checked = false;
    checkbox.name = 'selected_song_ids[]';
    
    // Add click handler for selection in right column
    item.addEventListener('click', function(e) {
        if (e.target.type !== 'checkbox') {
            checkbox.checked = !checkbox.checked;
        }
    });
    
    return item;
}

function createCatalogSongItem(selectedItem, songId) {
    const item = selectedItem.cloneNode(true);
    item.className = 'song-item catalog-song';
    item.dataset.id = songId;
    
    // Update checkbox
    const checkbox = item.querySelector('.song-checkbox');
    checkbox.checked = false;
    checkbox.name = 'song_catalog_ids[]';
    checkbox.classList.add('song-checkbox');
    
    // Add event listeners back
    checkbox.addEventListener('change', function() {
        handleCatalogSongSelection(this);
    });
    
    item.addEventListener('click', function(e) {
        if (e.target.type !== 'checkbox') {
            const checkbox = this.querySelector('.song-checkbox');
            checkbox.checked = !checkbox.checked;
            handleCatalogSongSelection(checkbox);
        }
    });
    
    return item;
}

function insertInAlphabeticalOrder(container, newItem) {
    const newTitle = newItem.querySelector('div[style*="font-weight: bold"]').textContent.trim().toLowerCase();
    const existingItems = Array.from(container.querySelectorAll('.catalog-song'));
    
    // Find the correct position to insert
    let insertPosition = existingItems.length;
    for (let i = 0; i < existingItems.length; i++) {
        const existingTitle = existingItems[i].querySelector('div[style*="font-weight: bold"]').textContent.trim().toLowerCase();
        if (newTitle < existingTitle) {
            insertPosition = i;
            break;
        }
    }
    
    if (insertPosition < existingItems.length) {
        container.insertBefore(newItem, existingItems[insertPosition]);
    } else {
        container.appendChild(newItem);
    }
}

function selectAllCatalog() {
    const visibleCheckboxes = document.querySelectorAll('.catalog-song:not([style*="display: none"]) .song-checkbox');
    visibleCheckboxes.forEach(checkbox => {
        checkbox.checked = true;
        handleCatalogSongSelection(checkbox);
    });
}

function clearCatalogSelection() {
    document.querySelectorAll('.catalog-song .song-checkbox').forEach(checkbox => {
        checkbox.checked = false;
        handleCatalogSongSelection(checkbox);
    });
}

function clearSelectedSongs() {
    const catalogList = document.getElementById('catalog-songs-list');
    const selectedItems = document.querySelectorAll('.selected-song-item');
    
    // Move all selected songs back to catalog list
    selectedItems.forEach(songItem => {
        const songId = songItem.dataset.id;
        const catalogItem = createCatalogSongItem(songItem, songId);
        insertInAlphabeticalOrder(catalogList, catalogItem);
    });
    
    selectedSongs.clear();
    document.getElementById('selected-songs-list').innerHTML = '<div id="empty-message" style="padding: 40px; text-align: center; color: #718096;">Select songs from the left to copy them to your band</div>';
    updateCounts();
    updateCopyButton();
}

function updateCounts() {
    document.getElementById('selected-count').textContent = selectedSongs.size;
    
    const visibleCatalogSongs = document.querySelectorAll('.catalog-song:not([style*="display: none"])').length;
    document.getElementById('catalog-count').textContent = visibleCatalogSongs;
}

function updateCopyButton() {
    const copyButton = document.getElementById('copy-button');
    copyButton.disabled = selectedSongs.size === 0;
}

function initializeSearch() {
    const searchInput = document.getElementById('catalog-search');
    let searchTimeout;
    
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(function() {
            filterCatalogSongs();
        }, 300);
    });
    
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            filterCatalogSongs();
        }
    });
}

function filterCatalogSongs() {
    const searchTerm = document.getElementById('catalog-search').value.toLowerCase();
    const catalogSongs = document.querySelectorAll('.catalog-song');
    
    catalogSongs.forEach(song => {
        const title = song.querySelector('div[style*="font-weight: bold"]').textContent.toLowerCase();
        
        if (title.includes(searchTerm)) {
            song.style.display = '';
        } else {
            song.style.display = 'none';
            // Uncheck hidden songs
            const checkbox = song.querySelector('.song-checkbox');
            if (checkbox.checked) {
                checkbox.checked = false;
                handleCatalogSongSelection(checkbox);
            }
        }
    });
    
    updateCounts();
}

// Form submission handler
document.getElementById('copy-songs-form').addEventListener('submit', function(e) {
    // Add hidden inputs for selected songs
    selectedSongs.forEach(songId => {
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'song_catalog_ids[]';
        hiddenInput.value = songId;
        this.appendChild(hiddenInput);
    });
});
</script>